#==============================================================================
#   Copyright (c) 2014 Michael Caisse, Jeff Garland
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

# bring in rules for testing
import testing ;
import modules ;
import feature ;

###############################################################################
project boostache_test
    : requirements
        <include>.
        <include>../include
        <source>/boost//headers
        <source>/boost//unit_test_framework
        <source>/boost//system
        <source>/boost//filesystem
        <toolset>gcc:<cxxflags>-std=c++0x
	<toolset>gcc:<cxxflags>-ftemplate-depth=512
	<toolset>gcc:<cxxflags>-Wno-unused-local-typedefs
        <toolset>clang:<cxxflags>-std=c++11
        <toolset>clang:<cxxflags>-ftemplate-depth-512
	<toolset>clang:<cxxflags>-stdlib=libc++
        <toolset>darwin:<cxxflags>-std=c++11
        <toolset>darwin:<cxxflags>-ftemplate-depth-512
	<target-os>darwin:<toolset>clang:<cxxflags>-stdlib=libc++
	<define>BOOST_TEST_DYN_LINK
    :
    :
    ;


{
   test-suite boostache/frontend :
       [ run frontend/grammar_basic.cpp ]
       [ run frontend/compiler_basic.cpp ]
    ;

   test-suite boostache/model :
       [ run model/traits.cpp ]
       [ run model/unwrap_variant.cpp ]
   ;

   test-suite boostache/core :
#      [ run test_model.cpp simple_parse simple_parse ]
#      [ run test_simple_parser.cpp simple_parse ]
#      [ run test_dynamic_model.cpp simple_parse ]
#      [ run test_json_model.cpp simple_parse ]
#      [ run test_collections.cpp simple_parse ]
#      [ run test_html_escape.cpp simple_parse ]
#      [ run test_multiple.cpp simple_parse ]
#      [ run test_nested_sections.cpp simple_parse ]
#      [ run test_partials.cpp simple_parse ]
      [ run mustache/test_sections.cpp ]
      [ run mustache/mustache_parser.cpp 
	    shared/parser_test.cpp
	]
#      [ run test_change_delimiter.cpp simple_parse ]
#      [ run test_inverted_sections.cpp simple_parse ]
#      [ run test_mustache_demo.cpp simple_parse ]
   ;

}
